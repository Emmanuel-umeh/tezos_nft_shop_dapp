{"ast":null,"code":"var _jsxFileName = \"/opt/tezos/nft-shop-example/src/components/BuyNFT.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BuyNft = ({\n  contract,\n  setUserBalance,\n  Tezos,\n  userAddress,\n  setStorage\n}) => {\n  _s();\n\n  const [loadingBuy, setLoadingBuy] = useState(false);\n  const [id, setId] = useState(0); // const [loadingDecrement, setLoadingDecrement] = useState<boolean>(false);\n\n  const buy_nft = async () => {\n    setLoadingBuy(true);\n\n    try {\n      const op = await contract.methods.default(id).send({\n        from: userAddress,\n        amount: amount\n      });\n      console.log(contract.methods);\n      await op.confirmation();\n      const newStorage = await contract.storage();\n      if (newStorage) setStorage(newStorage);\n      setUserBalance(await Tezos.tz.getBalance(userAddress));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoadingBuy(false);\n    }\n  };\n  /*\n    const increment = async (): Promise<void> => {\n      setLoadingIncrement(true);\n      try {\n        const op = await contract.methods.increment(1).send();\n        await op.confirmation();\n        const newStorage: any = await contract.storage();\n        if (newStorage) setStorage(newStorage.toNumber());\n        setUserBalance(await Tezos.tz.getBalance(userAddress));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoadingIncrement(false);\n      }\n    };\n  \n    const decrement = async (): Promise<void> => {\n      setLoadingDecrement(true);\n      try {\n        const op = await contract.methods.decrement(1).send();\n        await op.confirmation();\n        const newStorage: any = await contract.storage();\n        if (newStorage) setStorage(newStorage.toNumber());\n        setUserBalance(await Tezos.tz.getBalance(userAddress));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoadingDecrement(false);\n      }\n    };\n  */\n\n\n  if (!contract && !userAddress) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\xA0\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 41\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"buttons\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"NFT ID\",\n      value: id,\n      onChange: e => setId(parseInt(e.target.value, 10))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: buy_nft,\n      children: loadingBuy ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-spinner fa-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), \"\\xA0 Please wait\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-plus\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), \"\\xA0 Buy NFT\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BuyNft, \"Bz8XVncSajbTcsIzBjDmox5n3GM=\");\n\n_c = BuyNft;\nexport default UpdateContract;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyNft\");","map":{"version":3,"sources":["/opt/tezos/nft-shop-example/src/components/BuyNFT.tsx"],"names":["React","useState","BuyNft","contract","setUserBalance","Tezos","userAddress","setStorage","loadingBuy","setLoadingBuy","id","setId","buy_nft","op","methods","default","send","from","amount","console","log","confirmation","newStorage","storage","tz","getBalance","error","e","parseInt","target","value","UpdateContract"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA0D,OAA1D;;;AAWA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,cAAZ;AAA4BC,EAAAA,KAA5B;AAAmCC,EAAAA,WAAnC;AAAgDC,EAAAA;AAAhD,CAAD,KAA8E;AAAA;;AAC3F,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAU,KAAV,CAA5C;AACA,QAAM,CAACS,EAAD,EAAKC,KAAL,IAAcV,QAAQ,CAAS,CAAT,CAA5B,CAF2F,CAG3F;;AAEA,QAAMW,OAAO,GAAG,YAA2B;AACvCH,IAAAA,aAAa,CAAC,IAAD,CAAb;;AACA,QAAI;AACF,YAAMI,EAAE,GAAG,MAAMV,QAAQ,CAACW,OAAT,CAAiBC,OAAjB,CAAyBL,EAAzB,EAA6BM,IAA7B,CACf;AACEC,QAAAA,IAAI,EAAEX,WADR;AAEEY,QAAAA,MAAM,EAAEA;AAFV,OADe,CAAjB;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAQ,CAACW,OAArB;AACA,YAAMD,EAAE,CAACQ,YAAH,EAAN;AACA,YAAMC,UAAe,GAAG,MAAMnB,QAAQ,CAACoB,OAAT,EAA9B;AACA,UAAID,UAAJ,EAAgBf,UAAU,CAACe,UAAD,CAAV;AAChBlB,MAAAA,cAAc,CAAC,MAAMC,KAAK,CAACmB,EAAN,CAASC,UAAT,CAAoBnB,WAApB,CAAP,CAAd;AACD,KAXD,CAWE,OAAOoB,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD,KAbD,SAaU;AACRjB,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AAEJ,GAnBD;AAqBF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,MAAI,CAACN,QAAD,IAAa,CAACG,WAAlB,EAA+B,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAC/B,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,WAAW,EAAC,QAFd;AAGE,MAAA,KAAK,EAAEI,EAHT;AAIE,MAAA,QAAQ,EAAEiB,CAAC,IAAIhB,KAAK,CAACiB,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,EAAgB,EAAhB,CAAT;AAJtB;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AACE,MAAA,SAAS,EAAC,QADZ;AAEE,MAAA,OAAO,EAAElB,OAFX;AAAA,gBAIGJ,UAAU,gBACT;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cADS,gBAKT;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CAnFD;;GAAMN,M;;KAAAA,M;AAqFN,eAAe6B,cAAf","sourcesContent":["import React, { useState, Dispatch, SetStateAction } from \"react\";\nimport { TezosToolkit, WalletContract } from \"@taquito/taquito\";\n\ninterface BuyNftProps {\n  contract: WalletContract | any;\n  setUserBalance: Dispatch<SetStateAction<any>>;\n  Tezos: TezosToolkit;\n  userAddress: string;\n  setStorage: Dispatch<SetStateAction<any>>;\n}\n\nconst BuyNft = ({ contract, setUserBalance, Tezos, userAddress, setStorage}: BuyNftProps) => {\n  const [loadingBuy, setLoadingBuy] = useState<boolean>(false);\n  const [id, setId] = useState<number>(0);\n  // const [loadingDecrement, setLoadingDecrement] = useState<boolean>(false);\n\n  const buy_nft = async (): Promise<void> => {\n      setLoadingBuy(true);\n      try {\n        const op = await contract.methods.default(id).send(\n          {\n            from: userAddress,\n            amount: amount\n          });\n        console.log(contract.methods);\n        await op.confirmation();\n        const newStorage: any = await contract.storage();\n        if (newStorage) setStorage(newStorage);\n        setUserBalance(await Tezos.tz.getBalance(userAddress));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoadingBuy(false);\n      }\n\n  };\n\n/*\n  const increment = async (): Promise<void> => {\n    setLoadingIncrement(true);\n    try {\n      const op = await contract.methods.increment(1).send();\n      await op.confirmation();\n      const newStorage: any = await contract.storage();\n      if (newStorage) setStorage(newStorage.toNumber());\n      setUserBalance(await Tezos.tz.getBalance(userAddress));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoadingIncrement(false);\n    }\n  };\n\n  const decrement = async (): Promise<void> => {\n    setLoadingDecrement(true);\n    try {\n      const op = await contract.methods.decrement(1).send();\n      await op.confirmation();\n      const newStorage: any = await contract.storage();\n      if (newStorage) setStorage(newStorage.toNumber());\n      setUserBalance(await Tezos.tz.getBalance(userAddress));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoadingDecrement(false);\n    }\n  };\n*/\n\n  if (!contract && !userAddress) return <div>&nbsp;</div>;\n  return (\n    <div className=\"buttons\">\n      <input\n        type=\"number\"\n        placeholder=\"NFT ID\"\n        value={id}\n        onChange={e => setId(parseInt(e.target.value,10))}\n      />\n      <button \n        className=\"button\" \n        onClick={buy_nft}\n      >\n        {loadingBuy ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Please wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fas fa-plus\"></i>&nbsp; Buy NFT\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default UpdateContract;\n"]},"metadata":{},"sourceType":"module"}