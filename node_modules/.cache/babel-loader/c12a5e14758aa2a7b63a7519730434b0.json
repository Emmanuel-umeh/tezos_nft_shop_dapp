{"ast":null,"code":"import _defineProperty from\"/opt/tezos/nft-shop-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"/opt/tezos/nft-shop-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/opt/tezos/nft-shop-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/opt/tezos/nft-shop-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{BeaconWallet}from\"@taquito/beacon-wallet\";import{NetworkType,BeaconEvent,defaultEventCallbacks}from\"@airgap/beacon-sdk\";import TransportU2F from\"@ledgerhq/hw-transport-u2f\";import{LedgerSigner}from\"@taquito/ledger-signer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ConnectButton=function ConnectButton(_ref){var Tezos=_ref.Tezos,setContract=_ref.setContract,setWallet=_ref.setWallet,setUserAddress=_ref.setUserAddress,setUserBalance=_ref.setUserBalance,setStorage=_ref.setStorage,setNftList=_ref.setNftList,contractAddress=_ref.contractAddress,setBeaconConnection=_ref.setBeaconConnection,setPublicToken=_ref.setPublicToken,wallet=_ref.wallet;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loadingNano=_useState2[0],setLoadingNano=_useState2[1];var setup=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAddress){var balance,contract,storage,nftList;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setUserAddress(userAddress);// updates balance\n_context.next=3;return Tezos.tz.getBalance(userAddress);case 3:balance=_context.sent;setUserBalance(balance.toNumber());// creates contract instance\n_context.next=7;return Tezos.wallet.at(contractAddress);case 7:contract=_context.sent;_context.next=10;return contract.storage();case 10:storage=_context.sent;setContract(contract);setStorage(storage);nftList=[];storage.forEach(function(value,key,idx){nftList.push({id:key,stock:value.current_stock.toNumber(),price:value.token_price.toNumber()/1000000,address:value.token_address,admin:value.token_admin});});setNftList(nftList);case 16:case\"end\":return _context.stop();}}},_callee);}));return function setup(_x){return _ref2.apply(this,arguments);};}();var connectWallet=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var userAddress;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return wallet.requestPermissions({network:{type:NetworkType.FLORENCENET,rpcUrl:\"https://florencenet.api.tez.ie\"}});case 3:_context2.next=5;return wallet.getPKH();case 5:userAddress=_context2.sent;_context2.next=8;return setup(userAddress);case 8:setBeaconConnection(true);_context2.next=14;break;case 11:_context2.prev=11;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 14:case\"end\":return _context2.stop();}}},_callee2,null,[[0,11]]);}));return function connectWallet(){return _ref3.apply(this,arguments);};}();var connectNano=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var transport,ledgerSigner,userAddress;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;setLoadingNano(true);_context3.next=4;return TransportU2F.create();case 4:transport=_context3.sent;ledgerSigner=new LedgerSigner(transport,\"44'/1729'/0'/0'\",true);Tezos.setSignerProvider(ledgerSigner);//Get the public key and the public key hash from the Ledger\n_context3.next=9;return Tezos.signer.publicKeyHash();case 9:userAddress=_context3.sent;_context3.next=12;return setup(userAddress);case 12:_context3.next=18;break;case 14:_context3.prev=14;_context3.t0=_context3[\"catch\"](0);console.log(\"Error!\",_context3.t0);setLoadingNano(false);case 18:case\"end\":return _context3.stop();}}},_callee3,null,[[0,14]]);}));return function connectNano(){return _ref4.apply(this,arguments);};}();useEffect(function(){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _eventHandlers;var wallet,activeAccount,userAddress;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:// creates a wallet instance\nwallet=new BeaconWallet({name:\"Buy and Sell NFTs\",preferredNetwork:NetworkType.FLORENCENET,disableDefaultEvents:true,// Disable all events / UI. This also disables the pairing alert.\neventHandlers:(_eventHandlers={},_defineProperty(_eventHandlers,BeaconEvent.PAIR_INIT,{handler:defaultEventCallbacks.PAIR_INIT}),_defineProperty(_eventHandlers,BeaconEvent.PAIR_SUCCESS,{handler:function handler(data){return setPublicToken(data.publicKey);}}),_eventHandlers)});Tezos.setWalletProvider(wallet);setWallet(wallet);// checks if wallet was connected before\n_context4.next=5;return wallet.client.getActiveAccount();case 5:activeAccount=_context4.sent;if(!activeAccount){_context4.next=13;break;}_context4.next=9;return wallet.getPKH();case 9:userAddress=_context4.sent;_context4.next=12;return setup(userAddress);case 12:setBeaconConnection(true);case 13:case\"end\":return _context4.stop();}}},_callee4);}))();},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:connectWallet,children:/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-wallet\"}),\"\\xA0 Connect with wallet\"]})}),/*#__PURE__*/_jsx(\"button\",{className:\"button\",disabled:loadingNano,onClick:connectNano,children:loadingNano?/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-spinner fa-spin\"}),\"\\xA0 Loading, please wait\"]}):/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(\"i\",{className:\"fab fa-usb\"}),\"\\xA0 Connect with Ledger Nano\"]})})]});};export default ConnectButton;","map":{"version":3,"sources":["/opt/tezos/nft-shop-example/src/components/ConnectWallet.tsx"],"names":["React","useState","useEffect","BeaconWallet","NetworkType","BeaconEvent","defaultEventCallbacks","TransportU2F","LedgerSigner","ConnectButton","Tezos","setContract","setWallet","setUserAddress","setUserBalance","setStorage","setNftList","contractAddress","setBeaconConnection","setPublicToken","wallet","loadingNano","setLoadingNano","setup","userAddress","tz","getBalance","balance","toNumber","at","contract","storage","nftList","forEach","value","key","idx","push","id","stock","current_stock","price","token_price","address","token_address","admin","token_admin","connectWallet","requestPermissions","network","type","FLORENCENET","rpcUrl","getPKH","console","log","connectNano","create","transport","ledgerSigner","setSignerProvider","signer","publicKeyHash","name","preferredNetwork","disableDefaultEvents","eventHandlers","PAIR_INIT","handler","PAIR_SUCCESS","data","publicKey","setWalletProvider","client","getActiveAccount","activeAccount"],"mappings":"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","sourcesContent":["import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport {\n  NetworkType,\n  BeaconEvent,\n  defaultEventCallbacks\n} from \"@airgap/beacon-sdk\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport { LedgerSigner } from \"@taquito/ledger-signer\";\n\ntype ButtonProps = {\n  Tezos: TezosToolkit;\n  setContract: Dispatch<SetStateAction<any>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setStorage: Dispatch<SetStateAction<any>>;\n  setNftList: Dispatch<SetStateAction<any>>;\n  contractAddress: string;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  wallet: BeaconWallet;\n};\n\nconst ConnectButton = ({\n  Tezos,\n  setContract,\n  setWallet,\n  setUserAddress,\n  setUserBalance,\n  setStorage,\n  setNftList,\n  contractAddress,\n  setBeaconConnection,\n  setPublicToken,\n  wallet\n}: ButtonProps): JSX.Element => {\n  const [loadingNano, setLoadingNano] = useState<boolean>(false);\n\n  const setup = async (userAddress: string): Promise<void> => {\n    setUserAddress(userAddress);\n    // updates balance\n    const balance = await Tezos.tz.getBalance(userAddress);\n    setUserBalance(balance.toNumber());\n    // creates contract instance\n    const contract = await Tezos.wallet.at(contractAddress);\n    const storage: any = await contract.storage();\n    setContract(contract);\n    setStorage(storage);\n    let nftList: Object[] =  [];\n    storage.forEach( (value: any,key: number, idx: any) => {\n      nftList.push({id: key,stock:value.current_stock.toNumber(), price:value.token_price.toNumber()/1000000, address:value.token_address, admin: value.token_admin});\n    });\n    setNftList(nftList);\n\n  };\n\n  const connectWallet = async (): Promise<void> => {\n    try {\n      await wallet.requestPermissions({\n        network: {\n          type: NetworkType.FLORENCENET,\n          rpcUrl: \"https://florencenet.api.tez.ie\"\n        }\n      });\n      // gets user's address\n      const userAddress = await wallet.getPKH();\n      await setup(userAddress);\n      setBeaconConnection(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectNano = async (): Promise<void> => {\n    try {\n      setLoadingNano(true);\n      const transport = await TransportU2F.create();\n      const ledgerSigner = new LedgerSigner(transport, \"44'/1729'/0'/0'\", true);\n\n      Tezos.setSignerProvider(ledgerSigner);\n\n      //Get the public key and the public key hash from the Ledger\n      const userAddress = await Tezos.signer.publicKeyHash();\n      await setup(userAddress);\n    } catch (error) {\n      console.log(\"Error!\", error);\n      setLoadingNano(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // creates a wallet instance\n      const wallet = new BeaconWallet({\n        name: \"Buy and Sell NFTs\",\n        preferredNetwork: NetworkType.FLORENCENET,\n        disableDefaultEvents: true, // Disable all events / UI. This also disables the pairing alert.\n        eventHandlers: {\n          // To keep the pairing alert, we have to add the following default event handlers back\n          [BeaconEvent.PAIR_INIT]: {\n            handler: defaultEventCallbacks.PAIR_INIT\n          },\n          [BeaconEvent.PAIR_SUCCESS]: {\n            handler: data => setPublicToken(data.publicKey)\n          }\n        }\n      });\n      Tezos.setWalletProvider(wallet);\n      setWallet(wallet);\n      // checks if wallet was connected before\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const userAddress = await wallet.getPKH();\n        await setup(userAddress);\n        setBeaconConnection(true);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={connectWallet}>\n        <span>\n          <i className=\"fas fa-wallet\"></i>&nbsp; Connect with wallet\n        </span>\n      </button>\n      <button className=\"button\" disabled={loadingNano} onClick={connectNano}>\n        {loadingNano ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Loading, please\n            wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fab fa-usb\"></i>&nbsp; Connect with Ledger Nano\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n"]},"metadata":{},"sourceType":"module"}