{"ast":null,"code":"var _jsxFileName = \"/opt/tezos/nft-shop-example/src/components/BuyNFT.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BuyNFT = ({\n  contract,\n  setUserBalance,\n  Tezos,\n  userAddress,\n  setStorage,\n  setNftList,\n  nftList\n}) => {\n  _s();\n\n  const [loadingBuy, setLoadingBuy] = useState(false);\n  const [id, setId] = useState(0); // const [loadingDecrement, setLoadingDecrement] = useState<boolean>(false);\n\n  const buy_nft = async () => {\n    setLoadingBuy(true);\n\n    try {\n      const op = await contract.methods.default(id).send({});\n      console.log(contract.methods);\n      await op.confirmation();\n      const newStorage = await contract.storage();\n      if (newStorage) setStorage(newStorage);\n      let newNftList = [];\n      newStorage.forEach(value => {\n        newNftList.push({\n          stock: value.current_stock,\n          price: value.token_price,\n          address: value.token_address\n        });\n      });\n      setNftList(newNftList);\n      setUserBalance(await Tezos.tz.getBalance(userAddress));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoadingBuy(false);\n    }\n  };\n  /*\n    const increment = async (): Promise<void> => {\n      setLoadingIncrement(true);\n      try {\n        const op = await contract.methods.increment(1).send();\n        await op.confirmation();\n        const newStorage: any = await contract.storage();\n        if (newStorage) setStorage(newStorage.toNumber());\n        setUserBalance(await Tezos.tz.getBalance(userAddress));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoadingIncrement(false);\n      }\n    };\n  \n    const decrement = async (): Promise<void> => {\n      setLoadingDecrement(true);\n      try {\n        const op = await contract.methods.decrement(1).send();\n        await op.confirmation();\n        const newStorage: any = await contract.storage();\n        if (newStorage) setStorage(newStorage.toNumber());\n        setUserBalance(await Tezos.tz.getBalance(userAddress));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoadingDecrement(false);\n      }\n    };\n  */\n\n\n  if (!contract && !userAddress) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\xA0\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 41\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"buttons\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"NFT ID\",\n      value: id,\n      onChange: e => setId(parseInt(e.target.value, 10))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: buy_nft,\n      children: loadingBuy ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-spinner fa-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), \"\\xA0 Please wait\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-plus\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), \"\\xA0 Buy NFT\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BuyNFT, \"Bz8XVncSajbTcsIzBjDmox5n3GM=\");\n\n_c = BuyNFT;\nexport default BuyNFT;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyNFT\");","map":{"version":3,"sources":["/opt/tezos/nft-shop-example/src/components/BuyNFT.tsx"],"names":["React","useState","BuyNFT","contract","setUserBalance","Tezos","userAddress","setStorage","setNftList","nftList","loadingBuy","setLoadingBuy","id","setId","buy_nft","op","methods","default","send","console","log","confirmation","newStorage","storage","newNftList","forEach","value","push","stock","current_stock","price","token_price","address","token_address","tz","getBalance","error","e","parseInt","target"],"mappings":"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","sourcesContent":["import React, { useState, Dispatch, SetStateAction } from \"react\";\nimport { TezosToolkit, WalletContract } from \"@taquito/taquito\";\n\ninterface BuyNFTProps {\n  contract: WalletContract | any;\n  setUserBalance: Dispatch<SetStateAction<any>>;\n  Tezos: TezosToolkit;\n  userAddress: string;\n  setStorage: Dispatch<SetStateAction<any>>;\n  setNftList: Dispatch<SetStateAction<any>>;\n  nftList: Object[];\n}\n\nconst BuyNFT = ({ contract, setUserBalance, Tezos, userAddress, setStorage, setNftList, nftList}: BuyNFTProps) => {\n  const [loadingBuy, setLoadingBuy] = useState<boolean>(false);\n  const [id, setId] = useState<number>(0);\n\n  // const [loadingDecrement, setLoadingDecrement] = useState<boolean>(false);\n\n  const buy_nft = async (): Promise<void> => {\n      setLoadingBuy(true);\n      try {\n        const op = await contract.methods.default(id).send(\n          {\n          });\n        console.log(contract.methods);\n        await op.confirmation();\n        const newStorage: any = await contract.storage();\n        if (newStorage) setStorage(newStorage);\n        let newNftList: Object[] = [];\n        newStorage.forEach( (value: any) => {\n          newNftList.push({stock:value.current_stock, price:value.token_price, address:value.token_address});\n        });\n        setNftList(newNftList);\n        setUserBalance(await Tezos.tz.getBalance(userAddress));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoadingBuy(false);\n      }\n\n  };\n\n/*\n  const increment = async (): Promise<void> => {\n    setLoadingIncrement(true);\n    try {\n      const op = await contract.methods.increment(1).send();\n      await op.confirmation();\n      const newStorage: any = await contract.storage();\n      if (newStorage) setStorage(newStorage.toNumber());\n      setUserBalance(await Tezos.tz.getBalance(userAddress));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoadingIncrement(false);\n    }\n  };\n\n  const decrement = async (): Promise<void> => {\n    setLoadingDecrement(true);\n    try {\n      const op = await contract.methods.decrement(1).send();\n      await op.confirmation();\n      const newStorage: any = await contract.storage();\n      if (newStorage) setStorage(newStorage.toNumber());\n      setUserBalance(await Tezos.tz.getBalance(userAddress));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoadingDecrement(false);\n    }\n  };\n*/\n\n  if (!contract && !userAddress) return <div>&nbsp;</div>;\n  return (\n    <div className=\"buttons\">\n      <input\n        type=\"number\"\n        placeholder=\"NFT ID\"\n        value={id}\n        onChange={e => setId(parseInt(e.target.value,10))}\n      />\n      <button \n        className=\"button\" \n        onClick={buy_nft}\n      >\n        {loadingBuy ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Please wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fas fa-plus\"></i>&nbsp; Buy NFT\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default BuyNFT;\n"]},"metadata":{},"sourceType":"module"}