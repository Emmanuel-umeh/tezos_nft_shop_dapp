{"ast":null,"code":"var _jsxFileName = \"/opt/tezos/nft-shop-example/src/components/BuyNFT.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BuyNFT = ({\n  contract,\n  setUserBalance,\n  Tezos,\n  userAddress,\n  setStorage,\n  setNftList,\n  nftList\n}) => {\n  _s();\n\n  const [loadingBuy, setLoadingBuy] = useState(false);\n  const [id, setId] = useState(0);\n  const [transactionInProgress, setTransactionInProgress] = useState(false);\n  const toastId = React.useRef(null);\n  useEffect(() => {\n    if (transactionInProgress && !toastId.current) {\n      toastId.current = toast.info('Transaction in progress. Confirm signing dialog and please wait...', {\n        position: 'top-right',\n        autoClose: false,\n        hideProgressBar: false,\n        closeOnClick: false,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        closeButton: false\n      });\n    } else if (!transactionInProgress && toastId.current) {\n      toast.dismiss(toastId.current);\n      toastId.current = null;\n    }\n  }, [transactionInProgress, toastId.current]);\n\n  const buy_nft = async () => {\n    setLoadingBuy(true);\n    setTransactionInProgress(true);\n\n    try {\n      const op = await contract.methods.buy(id).send({\n        amount: nftList[id].price\n      });\n      await op.confirmation();\n      const newStorage = await contract.storage();\n      if (newStorage) setStorage(newStorage);\n      let newNftList = [];\n      newStorage.forEach((value, key, idx) => {\n        newNftList.push({\n          id: key,\n          stock: value.current_stock.toNumber(),\n          price: value.token_price.toNumber() / 1000000,\n          address: value.token_address,\n          admin: value.token_admin\n        });\n      });\n      setNftList(newNftList);\n      setUserBalance(await Tezos.tz.getBalance(userAddress));\n      toast(\"Successfully bought nft\", {\n        type: 'success'\n      });\n    } catch (error) {\n      console.log(error);\n      toast.error('There was an error sending your transaction. Please check developer console.');\n    } finally {\n      setLoadingBuy(false);\n      setTransactionInProgress(false);\n    }\n  };\n\n  if (!contract && !userAddress) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\xA0\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 41\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"\\xA0\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 8\n    }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" Enter Nft ID to buy \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 8\n    }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"NFT ID\",\n      value: id,\n      onChange: e => setId(parseInt(e.target.value, 10))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: buy_nft,\n      children: loadingBuy ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-spinner fa-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), \"\\xA0 Please wait\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-plus\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), \"\\xA0 Buy NFT\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BuyNFT, \"5n/bud3+HZ35PHM8Z+ZtxUfr1a0=\");\n\n_c = BuyNFT;\nexport default BuyNFT;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyNFT\");","map":{"version":3,"sources":["/opt/tezos/nft-shop-example/src/components/BuyNFT.tsx"],"names":["React","useState","useEffect","ToastContainer","toast","BuyNFT","contract","setUserBalance","Tezos","userAddress","setStorage","setNftList","nftList","loadingBuy","setLoadingBuy","id","setId","transactionInProgress","setTransactionInProgress","toastId","useRef","current","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","closeButton","dismiss","buy_nft","op","methods","buy","send","amount","price","confirmation","newStorage","storage","newNftList","forEach","value","key","idx","push","stock","current_stock","toNumber","token_price","address","token_address","admin","token_admin","tz","getBalance","type","error","console","log","e","parseInt","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Dispatch, SetStateAction } from \"react\";\nimport { TezosToolkit, WalletContract } from \"@taquito/taquito\";\nimport { ToastContainer, toast } from 'react-toastify';\n\ninterface BuyNFTProps {\n  contract: WalletContract | any;\n  setUserBalance: Dispatch<SetStateAction<any>>;\n  Tezos: TezosToolkit;\n  userAddress: string;\n  setStorage: Dispatch<SetStateAction<any>>;\n  setNftList: Dispatch<SetStateAction<any>>;\n  nftList: any;\n}\n\nconst BuyNFT = ({ contract, setUserBalance, Tezos, userAddress, setStorage, setNftList, nftList }: BuyNFTProps) => {\n  const [loadingBuy, setLoadingBuy] = useState<boolean>(false);\n  const [id, setId] = useState<number>(0);\n  const [transactionInProgress, setTransactionInProgress] = useState(false);\n  const toastId: any = React.useRef(null);\n\n\n\n  useEffect(() => {\n      if (transactionInProgress && !toastId.current) {\n          toastId.current = toast.info(\n              'Transaction in progress. Confirm signing dialog and please wait...',\n              {\n                  position: 'top-right',\n                  autoClose: false,\n                  hideProgressBar: false,\n                  closeOnClick: false,\n                  pauseOnHover: true,\n                  draggable: true,\n                  progress: undefined,\n                  closeButton: false\n              }\n          );\n      } else if (!transactionInProgress && toastId.current) {\n          toast.dismiss(toastId.current);\n          toastId.current = null;\n      }\n  }, [transactionInProgress, toastId.current]);\n\n  const buy_nft = async (): Promise<void> => {\n      setLoadingBuy(true);\n      setTransactionInProgress(true);\n      try {\n        const op = await contract.methods.buy(id).send(\n          {\n            amount: nftList[id].price\n          });\n\n        await op.confirmation();\n        const newStorage: any = await contract.storage();\n        if (newStorage) setStorage(newStorage);\n        let newNftList: any = [];\n        newStorage.forEach( (value: any, key: number, idx: any) => {\n          newNftList.push({id: key, stock:value.current_stock.toNumber(), price:value.token_price.toNumber() /1000000, address:value.token_address, admin: value.token_admin});\n        });\n        setNftList(newNftList);\n        setUserBalance(await Tezos.tz.getBalance(userAddress));\n        toast(\"Successfully bought nft\", {type:'success'});\n      } catch (error) {\n        console.log(error);\n        toast.error(\n          'There was an error sending your transaction. Please check developer console.'\n        );\n      } finally {\n        setLoadingBuy(false);\n        setTransactionInProgress(false);\n      }\n\n  };\n\n\n  if (!contract && !userAddress) return <div>&nbsp;</div>;\n  return (\n    <div>\n      &nbsp;\n\n       <br/>\n       <br/>\n       <br/>\n      &nbsp;<span> Enter Nft ID to buy </span>\n       <br/>\n       <br/>\n      &nbsp;<input\n        type=\"number\"\n        placeholder=\"NFT ID\"\n        value={id}\n        onChange={e => setId(parseInt(e.target.value,10))}\n      />\n      &nbsp;<button \n        className=\"button\" \n        onClick={buy_nft}\n      >\n        {loadingBuy ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Please wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fas fa-plus\"></i>&nbsp; Buy NFT\n          </span>\n        )}\n      </button>\n    <ToastContainer />\n    </div>\n  );\n};\n\nexport default BuyNFT;\n"]},"metadata":{},"sourceType":"module"}