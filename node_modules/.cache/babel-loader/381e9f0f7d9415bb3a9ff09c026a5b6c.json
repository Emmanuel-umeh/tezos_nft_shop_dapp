{"ast":null,"code":"var _jsxFileName = \"/opt/tezos/nft-shop-example/src/components/RecoverNFT.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecoverNFT = ({\n  contract,\n  setUserBalance,\n  Tezos,\n  userAddress,\n  setStorage,\n  setNftList\n}) => {\n  _s();\n\n  const [loadingBuy, setLoadingBuy] = useState(false);\n  const [id, setId] = useState();\n\n  const recover_nft = async () => {\n    setLoadingBuy(true);\n\n    try {\n      const op = await contract.methods.recover(id).send({});\n      await op.confirmation();\n      const newStorage = await contract.storage();\n      if (newStorage) setStorage(newStorage);\n      let newNftList = [];\n      newStorage.forEach((value, key, idx) => {\n        newNftList.push({\n          id: key,\n          stock: value.current_stock.toNumber(),\n          price: value.token_price.toNumber() / 1000000,\n          address: value.token_address,\n          admin: value.token_admin\n        });\n      });\n      setNftList(newNftList);\n      setUserBalance(await Tezos.tz.getBalance(userAddress));\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoadingBuy(false);\n    }\n  };\n\n  if (!contract && !userAddress) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\xA0\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 41\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"\\xA0\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 8\n    }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" Enter Nft ID to recover \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 8\n    }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"NFT ID\",\n      value: id,\n      onChange: e => setId(parseInt(e.target.value, 10))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: recover_nft,\n      children: loadingBuy ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-spinner fa-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), \"\\xA0 Please wait\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-plus\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), \"\\xA0 Recover NFT\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RecoverNFT, \"BUKrI4WiVCJxFVwczbaDYnUte20=\");\n\n_c = RecoverNFT;\nexport default RecoverNFT;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecoverNFT\");","map":{"version":3,"sources":["/opt/tezos/nft-shop-example/src/components/RecoverNFT.tsx"],"names":["React","useState","RecoverNFT","contract","setUserBalance","Tezos","userAddress","setStorage","setNftList","loadingBuy","setLoadingBuy","id","setId","recover_nft","op","methods","recover","send","confirmation","newStorage","storage","newNftList","forEach","value","key","idx","push","stock","current_stock","toNumber","price","token_price","address","token_address","admin","token_admin","tz","getBalance","error","console","log","e","parseInt","target"],"mappings":"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","sourcesContent":["import React, { useState, Dispatch, SetStateAction } from \"react\";\nimport { TezosToolkit, WalletContract } from \"@taquito/taquito\";\n\n\ninterface RecoverNFTProps {\n  contract: WalletContract | any;\n  setUserBalance: Dispatch<SetStateAction<any>>;\n  Tezos: TezosToolkit;\n  userAddress: string;\n  setStorage: Dispatch<SetStateAction<any>>;\n  setNftList: Dispatch<SetStateAction<any>>;\n}\n\nconst RecoverNFT = ({ contract, setUserBalance, Tezos, userAddress, setStorage, setNftList}: RecoverNFTProps) => {\n  const [loadingBuy, setLoadingBuy] = useState<boolean>(false);\n  const [id, setId] = useState<number>();\n\n\n  const recover_nft = async (): Promise<void> => {\n      setLoadingBuy(true);\n      try {\n        const op = await contract.methods.recover(id).send({});\n\n        await op.confirmation();\n        const newStorage: any = await contract.storage();\n        if (newStorage) setStorage(newStorage);\n        let newNftList: any = [];\n        newStorage.forEach( (value: any, key: number, idx: any) => {\n          newNftList.push({id: key, stock:value.current_stock.toNumber(), price:value.token_price.toNumber() /1000000, address:value.token_address, admin: value.token_admin});\n        });\n        setNftList(newNftList);\n        setUserBalance(await Tezos.tz.getBalance(userAddress));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoadingBuy(false);\n      }\n\n  };\n\n\n  if (!contract && !userAddress) return <div>&nbsp;</div>;\n  return (\n    <div>\n      &nbsp;\n\n       <br/>\n       <br/>\n       <br/>\n      &nbsp;<span> Enter Nft ID to recover </span>\n       <br/>\n       <br/>\n      &nbsp;<input\n        type=\"number\"\n        placeholder=\"NFT ID\"\n        value={id}\n        onChange={e => setId(parseInt(e.target.value,10))}\n      />\n      &nbsp;<button \n        className=\"button\" \n        onClick={recover_nft}\n      >\n        {loadingBuy ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Please wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fas fa-plus\"></i>&nbsp; Recover NFT\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default RecoverNFT;"]},"metadata":{},"sourceType":"module"}