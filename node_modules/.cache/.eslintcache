[{"/opt/tezos/taquito-react-template/src/index.js":"1","/opt/tezos/taquito-react-template/src/App.tsx":"2","/opt/tezos/taquito-react-template/src/serviceWorker.js":"3","/opt/tezos/taquito-react-template/src/components/ConnectWallet.tsx":"4","/opt/tezos/taquito-react-template/src/components/Transfers.tsx":"5","/opt/tezos/taquito-react-template/src/components/DisconnectWallet.tsx":"6","/opt/tezos/taquito-react-template/src/components/UpdateContract.tsx":"7","/opt/tezos/nft-shop-example/src/index.js":"8","/opt/tezos/nft-shop-example/src/App.tsx":"9","/opt/tezos/nft-shop-example/src/serviceWorker.js":"10","/opt/tezos/nft-shop-example/src/components/ConnectWallet.tsx":"11","/opt/tezos/nft-shop-example/src/components/DisconnectWallet.tsx":"12","/opt/tezos/nft-shop-example/src/components/UpdateContract.tsx":"13","/opt/tezos/nft-shop-example/src/components/Transfers.tsx":"14"},{"size":485,"mtime":1629476147531,"results":"15","hashOfConfig":"16"},{"size":7819,"mtime":1629476147531,"results":"17","hashOfConfig":"16"},{"size":5086,"mtime":1629476147531,"results":"18","hashOfConfig":"16"},{"size":4192,"mtime":1629476147531,"results":"19","hashOfConfig":"16"},{"size":1795,"mtime":1629476147531,"results":"20","hashOfConfig":"16"},{"size":1460,"mtime":1629476147531,"results":"21","hashOfConfig":"16"},{"size":2390,"mtime":1629476147531,"results":"22","hashOfConfig":"16"},{"size":485,"mtime":1629483256266,"results":"23","hashOfConfig":"24"},{"size":11790,"mtime":1629743316920,"results":"25","hashOfConfig":"24"},{"size":5086,"mtime":1629483256266,"results":"26","hashOfConfig":"24"},{"size":4523,"mtime":1629742297627,"results":"27","hashOfConfig":"24"},{"size":1460,"mtime":1629483256266,"results":"28","hashOfConfig":"24"},{"size":2387,"mtime":1629593814476,"results":"29","hashOfConfig":"24"},{"size":1795,"mtime":1629483256266,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nl1ycx",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1k59evj",{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"/opt/tezos/taquito-react-template/src/index.js",[],"/opt/tezos/taquito-react-template/src/App.tsx",["66"],"import React, { useState } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport \"./App.css\";\nimport ConnectButton from \"./components/ConnectWallet\";\nimport DisconnectButton from \"./components/DisconnectWallet\";\nimport qrcode from \"qrcode-generator\";\nimport UpdateContract from \"./components/UpdateContract\";\nimport Transfers from \"./components/Transfers\";\n\nenum BeaconConnection {\n  NONE = \"\",\n  LISTENING = \"Listening to P2P channel\",\n  CONNECTED = \"Channel connected\",\n  PERMISSION_REQUEST_SENT = \"Permission request sent, waiting for response\",\n  PERMISSION_REQUEST_SUCCESS = \"Wallet is connected\"\n}\n\nconst App = () => {\n  const [Tezos, setTezos] = useState<TezosToolkit>(\n    new TezosToolkit(\"https://api.tez.ie/rpc/granadanet\")\n  );\n  const [contract, setContract] = useState<any>(undefined);\n  const [publicToken, setPublicToken] = useState<string | null>(\"\");\n  const [wallet, setWallet] = useState<any>(null);\n  const [userAddress, setUserAddress] = useState<string>(\"\");\n  const [userBalance, setUserBalance] = useState<number>(0);\n  const [storage, setStorage] = useState<number>(0);\n  const [copiedPublicToken, setCopiedPublicToken] = useState<boolean>(false);\n  const [beaconConnection, setBeaconConnection] = useState<boolean>(false);\n  const [activeTab, setActiveTab] = useState<string>(\"transfer\");\n\n  // Granadanet Increment/Decrement contract\n  const contractAddress: string = \"KT1K3XVNzsmur7VRgY8CAHPUENaErzzEpe4e\";\n\n  const generateQrCode = (): { __html: string } => {\n    const qr = qrcode(0, \"L\");\n    qr.addData(publicToken || \"\");\n    qr.make();\n\n    return { __html: qr.createImgTag(4) };\n  };\n\n  if (publicToken && (!userAddress || isNaN(userBalance))) {\n    return (\n      <div className=\"main-box\">\n        <h1>Taquito Boilerplate</h1>\n        <div id=\"dialog\">\n          <header>Try the Taquito Boilerplate App!</header>\n          <div id=\"content\">\n            <p className=\"text-align-center\">\n              <i className=\"fas fa-broadcast-tower\"></i>&nbsp; Connecting to\n              your wallet\n            </p>\n            <div\n              dangerouslySetInnerHTML={generateQrCode()}\n              className=\"text-align-center\"\n            ></div>\n            <p id=\"public-token\">\n              {copiedPublicToken ? (\n                <span id=\"public-token-copy__copied\">\n                  <i className=\"far fa-thumbs-up\"></i>\n                </span>\n              ) : (\n                <span\n                  id=\"public-token-copy\"\n                  onClick={() => {\n                    if (publicToken) {\n                      navigator.clipboard.writeText(publicToken);\n                      setCopiedPublicToken(true);\n                      setTimeout(() => setCopiedPublicToken(false), 2000);\n                    }\n                  }}\n                >\n                  <i className=\"far fa-copy\"></i>\n                </span>\n              )}\n\n              <span>\n                Public token: <span>{publicToken}</span>\n              </span>\n            </p>\n            <p className=\"text-align-center\">\n              Status: {beaconConnection ? \"Connected\" : \"Disconnected\"}\n            </p>\n          </div>\n        </div>\n        <div id=\"footer\">\n          <img src=\"built-with-taquito.png\" alt=\"Built with Taquito\" />\n        </div>\n      </div>\n    );\n  } else if (userAddress && !isNaN(userBalance)) {\n    return (\n      <div className=\"main-box\">\n        <h1>Taquito Boilerplate</h1>\n        <div id=\"tabs\">\n          <div\n            id=\"transfer\"\n            className={activeTab === \"transfer\" ? \"active\" : \"\"}\n            onClick={() => setActiveTab(\"transfer\")}\n          >\n            Make a transfer\n          </div>\n          <div\n            id=\"contract\"\n            className={activeTab === \"contract\" ? \"active\" : \"\"}\n            onClick={() => setActiveTab(\"contract\")}\n          >\n            Interact with a contract\n          </div>\n        </div>\n        <div id=\"dialog\">\n          <div id=\"content\">\n            {activeTab === \"transfer\" ? (\n              <div id=\"transfers\">\n                <h3 className=\"text-align-center\">Make a transfer</h3>\n                <Transfers\n                  Tezos={Tezos}\n                  setUserBalance={setUserBalance}\n                  userAddress={userAddress}\n                />\n              </div>\n            ) : (\n              <div id=\"increment-decrement\">\n                <h3 className=\"text-align-center\">\n                  Current counter: <span>{storage}</span>\n                </h3>\n                <UpdateContract\n                  contract={contract}\n                  setUserBalance={setUserBalance}\n                  Tezos={Tezos}\n                  userAddress={userAddress}\n                  setStorage={setStorage}\n                />\n              </div>\n            )}\n            <p>\n              <i className=\"far fa-file-code\"></i>&nbsp;\n              <a\n                href={`https://better-call.dev/granadanet/${contractAddress}/operations`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {contractAddress}\n              </a>\n            </p>\n            <p>\n              <i className=\"far fa-address-card\"></i>&nbsp; {userAddress}\n            </p>\n            <p>\n              <i className=\"fas fa-piggy-bank\"></i>&nbsp;\n              {(userBalance / 1000000).toLocaleString(\"en-US\")} êœ©\n            </p>\n          </div>\n          <DisconnectButton\n            wallet={wallet}\n            setPublicToken={setPublicToken}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setWallet={setWallet}\n            setTezos={setTezos}\n            setBeaconConnection={setBeaconConnection}\n          />\n        </div>\n        <div id=\"footer\">\n          <img src=\"built-with-taquito.png\" alt=\"Built with Taquito\" />\n        </div>\n      </div>\n    );\n  } else if (!publicToken && !userAddress && !userBalance) {\n    return (\n      <div className=\"main-box\">\n        <div className=\"title\">\n          <h1>Taquito Boilerplate</h1>\n          <a href=\"https://app.netlify.com/start/deploy?repository=https://github.com/ecadlabs/taquito-boilerplate\">\n            <img\n              src=\"https://www.netlify.com/img/deploy/button.svg\"\n              alt=\"netlify-button\"\n            />\n          </a>\n        </div>\n        <div id=\"dialog\">\n          <header>Welcome to Taquito Boilerplate App!</header>\n          <div id=\"content\">\n            <p>Hello!</p>\n            <p>\n              This is a template Tezos dApp built using Taquito. It's a starting\n              point for you to hack on and build your own dApp for Tezos.\n              <br />\n              If you have not done so already, go to the{\" \"}\n              <a\n                href=\"https://github.com/ecadlabs/taquito-boilerplate\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Taquito boilerplate Github page\n              </a>{\" \"}\n              and click the <em>\"Use this template\"</em> button.\n            </p>\n            <p>Go forth and Tezos!</p>\n          </div>\n          <ConnectButton\n            Tezos={Tezos}\n            setContract={setContract}\n            setPublicToken={setPublicToken}\n            setWallet={setWallet}\n            setUserAddress={setUserAddress}\n            setUserBalance={setUserBalance}\n            setStorage={setStorage}\n            contractAddress={contractAddress}\n            setBeaconConnection={setBeaconConnection}\n            wallet={wallet}\n          />\n        </div>\n        <div id=\"footer\">\n          <img src=\"built-with-taquito.png\" alt=\"Built with Taquito\" />\n        </div>\n      </div>\n    );\n  } else {\n    return <div>An error has occurred</div>;\n  }\n};\n\nexport default App;\n","/opt/tezos/taquito-react-template/src/serviceWorker.js",[],"/opt/tezos/taquito-react-template/src/components/ConnectWallet.tsx",["67"],"import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport {\n  NetworkType,\n  BeaconEvent,\n  defaultEventCallbacks\n} from \"@airgap/beacon-sdk\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport { LedgerSigner } from \"@taquito/ledger-signer\";\n\ntype ButtonProps = {\n  Tezos: TezosToolkit;\n  setContract: Dispatch<SetStateAction<any>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setStorage: Dispatch<SetStateAction<number>>;\n  contractAddress: string;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  wallet: BeaconWallet;\n};\n\nconst ConnectButton = ({\n  Tezos,\n  setContract,\n  setWallet,\n  setUserAddress,\n  setUserBalance,\n  setStorage,\n  contractAddress,\n  setBeaconConnection,\n  setPublicToken,\n  wallet\n}: ButtonProps): JSX.Element => {\n  const [loadingNano, setLoadingNano] = useState<boolean>(false);\n\n  const setup = async (userAddress: string): Promise<void> => {\n    setUserAddress(userAddress);\n    // updates balance\n    const balance = await Tezos.tz.getBalance(userAddress);\n    setUserBalance(balance.toNumber());\n    // creates contract instance\n    const contract = await Tezos.wallet.at(contractAddress);\n    const storage: any = await contract.storage();\n    setContract(contract);\n    setStorage(storage.toNumber());\n  };\n\n  const connectWallet = async (): Promise<void> => {\n    try {\n      await wallet.requestPermissions({\n        network: {\n          type: NetworkType.GRANADANET,\n          rpcUrl: \"https://api.tez.ie/rpc/granadanet\"\n        }\n      });\n      // gets user's address\n      const userAddress = await wallet.getPKH();\n      await setup(userAddress);\n      setBeaconConnection(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectNano = async (): Promise<void> => {\n    try {\n      setLoadingNano(true);\n      const transport = await TransportU2F.create();\n      const ledgerSigner = new LedgerSigner(transport, \"44'/1729'/0'/0'\", true);\n\n      Tezos.setSignerProvider(ledgerSigner);\n\n      //Get the public key and the public key hash from the Ledger\n      const userAddress = await Tezos.signer.publicKeyHash();\n      await setup(userAddress);\n    } catch (error) {\n      console.log(\"Error!\", error);\n      setLoadingNano(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // creates a wallet instance\n      const wallet = new BeaconWallet({\n        name: \"Taquito Boilerplate\",\n        preferredNetwork: NetworkType.GRANADANET,\n        disableDefaultEvents: true, // Disable all events / UI. This also disables the pairing alert.\n        eventHandlers: {\n          // To keep the pairing alert, we have to add the following default event handlers back\n          [BeaconEvent.PAIR_INIT]: {\n            handler: defaultEventCallbacks.PAIR_INIT\n          },\n          [BeaconEvent.PAIR_SUCCESS]: {\n            handler: data => setPublicToken(data.publicKey)\n          }\n        }\n      });\n      Tezos.setWalletProvider(wallet);\n      setWallet(wallet);\n      // checks if wallet was connected before\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const userAddress = await wallet.getPKH();\n        await setup(userAddress);\n        setBeaconConnection(true);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={connectWallet}>\n        <span>\n          <i className=\"fas fa-wallet\"></i>&nbsp; Connect with wallet\n        </span>\n      </button>\n      <button className=\"button\" disabled={loadingNano} onClick={connectNano}>\n        {loadingNano ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Loading, please\n            wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fab fa-usb\"></i>&nbsp; Connect with Ledger Nano\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n","/opt/tezos/taquito-react-template/src/components/Transfers.tsx",[],"/opt/tezos/taquito-react-template/src/components/DisconnectWallet.tsx",[],"/opt/tezos/taquito-react-template/src/components/UpdateContract.tsx",[],"/opt/tezos/nft-shop-example/src/index.js",[],["68","69"],"/opt/tezos/nft-shop-example/src/App.tsx",["70","71","72","73","74","75"],"/opt/tezos/nft-shop-example/src/serviceWorker.js",[],"/opt/tezos/nft-shop-example/src/components/ConnectWallet.tsx",["76"],"import React, { Dispatch, SetStateAction, useState, useEffect } from \"react\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport {\n  NetworkType,\n  BeaconEvent,\n  defaultEventCallbacks\n} from \"@airgap/beacon-sdk\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport { LedgerSigner } from \"@taquito/ledger-signer\";\n\ntype ButtonProps = {\n  Tezos: TezosToolkit;\n  setContract: Dispatch<SetStateAction<any>>;\n  setWallet: Dispatch<SetStateAction<any>>;\n  setUserAddress: Dispatch<SetStateAction<string>>;\n  setUserBalance: Dispatch<SetStateAction<number>>;\n  setStorage: Dispatch<SetStateAction<any>>;\n  setNftList: Dispatch<SetStateAction<any>>;\n  contractAddress: string;\n  setBeaconConnection: Dispatch<SetStateAction<boolean>>;\n  setPublicToken: Dispatch<SetStateAction<string | null>>;\n  wallet: BeaconWallet;\n};\n\nconst ConnectButton = ({\n  Tezos,\n  setContract,\n  setWallet,\n  setUserAddress,\n  setUserBalance,\n  setStorage,\n  setNftList,\n  contractAddress,\n  setBeaconConnection,\n  setPublicToken,\n  wallet\n}: ButtonProps): JSX.Element => {\n  const [loadingNano, setLoadingNano] = useState<boolean>(false);\n\n  const setup = async (userAddress: string): Promise<void> => {\n    setUserAddress(userAddress);\n    // updates balance\n    const balance = await Tezos.tz.getBalance(userAddress);\n    setUserBalance(balance.toNumber());\n    // creates contract instance\n    const contract = await Tezos.wallet.at(contractAddress);\n    const storage: any = await contract.storage();\n    setContract(contract);\n    setStorage(storage);\n    let nftList: Object[] =  [];\n    storage.forEach( (value: any,key: number, idx: any) => {\n      nftList.push({id: key,stock:value.current_stock.toNumber(), price:value.token_price.toNumber()/1000000, address:value.token_address, admin: value.token_admin});\n    });\n    setNftList(nftList);\n\n  };\n\n  const connectWallet = async (): Promise<void> => {\n    try {\n      await wallet.requestPermissions({\n        network: {\n          type: NetworkType.FLORENCENET,\n          rpcUrl: \"https://florencenet.api.tez.ie\"\n        }\n      });\n      // gets user's address\n      const userAddress = await wallet.getPKH();\n      await setup(userAddress);\n      setBeaconConnection(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectNano = async (): Promise<void> => {\n    try {\n      setLoadingNano(true);\n      const transport = await TransportU2F.create();\n      const ledgerSigner = new LedgerSigner(transport, \"44'/1729'/0'/0'\", true);\n\n      Tezos.setSignerProvider(ledgerSigner);\n\n      //Get the public key and the public key hash from the Ledger\n      const userAddress = await Tezos.signer.publicKeyHash();\n      await setup(userAddress);\n    } catch (error) {\n      console.log(\"Error!\", error);\n      setLoadingNano(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // creates a wallet instance\n      const wallet = new BeaconWallet({\n        name: \"Buy my NFTs\",\n        preferredNetwork: NetworkType.FLORENCENET,\n        disableDefaultEvents: true, // Disable all events / UI. This also disables the pairing alert.\n        eventHandlers: {\n          // To keep the pairing alert, we have to add the following default event handlers back\n          [BeaconEvent.PAIR_INIT]: {\n            handler: defaultEventCallbacks.PAIR_INIT\n          },\n          [BeaconEvent.PAIR_SUCCESS]: {\n            handler: data => setPublicToken(data.publicKey)\n          }\n        }\n      });\n      Tezos.setWalletProvider(wallet);\n      setWallet(wallet);\n      // checks if wallet was connected before\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const userAddress = await wallet.getPKH();\n        await setup(userAddress);\n        setBeaconConnection(true);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"buttons\">\n      <button className=\"button\" onClick={connectWallet}>\n        <span>\n          <i className=\"fas fa-wallet\"></i>&nbsp; Connect with wallet\n        </span>\n      </button>\n      <button className=\"button\" disabled={loadingNano} onClick={connectNano}>\n        {loadingNano ? (\n          <span>\n            <i className=\"fas fa-spinner fa-spin\"></i>&nbsp; Loading, please\n            wait\n          </span>\n        ) : (\n          <span>\n            <i className=\"fab fa-usb\"></i>&nbsp; Connect with Ledger Nano\n          </span>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectButton;\n",["77","78"],"/opt/tezos/nft-shop-example/src/components/DisconnectWallet.tsx",[],"/opt/tezos/nft-shop-example/src/components/UpdateContract.tsx",[],["79","80"],"/opt/tezos/nft-shop-example/src/components/Transfers.tsx",[],["81","82"],{"ruleId":"83","severity":1,"message":"84","line":10,"column":6,"nodeType":"85","messageId":"86","endLine":10,"endColumn":22},{"ruleId":"87","severity":1,"message":"88","line":112,"column":6,"nodeType":"89","endLine":112,"endColumn":8,"suggestions":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"83","severity":1,"message":"95","line":8,"column":32,"nodeType":"85","messageId":"86","endLine":8,"endColumn":53},{"ruleId":"83","severity":1,"message":"84","line":40,"column":6,"nodeType":"85","messageId":"86","endLine":40,"endColumn":22},{"ruleId":"83","severity":1,"message":"96","line":57,"column":10,"nodeType":"85","messageId":"86","endLine":57,"endColumn":17},{"ruleId":"83","severity":1,"message":"97","line":60,"column":10,"nodeType":"85","messageId":"86","endLine":60,"endColumn":19},{"ruleId":"83","severity":1,"message":"98","line":60,"column":21,"nodeType":"85","messageId":"86","endLine":60,"endColumn":33},{"ruleId":"87","severity":1,"message":"99","line":99,"column":6,"nodeType":"89","endLine":99,"endColumn":46,"suggestions":"100"},{"ruleId":"87","severity":1,"message":"88","line":120,"column":6,"nodeType":"89","endLine":120,"endColumn":8,"suggestions":"101"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"91","replacedBy":"102"},{"ruleId":"93","replacedBy":"103"},{"ruleId":"91","replacedBy":"104"},{"ruleId":"93","replacedBy":"105"},"@typescript-eslint/no-unused-vars","'BeaconConnection' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Tezos', 'setBeaconConnection', 'setPublicToken', 'setWallet', and 'setup'. Either include them or remove the dependency array. If 'setWallet' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["106"],"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"'GridValueGetterParams' is defined but never used.","'storage' is assigned a value but never used.","'activeTab' is assigned a value but never used.","'setActiveTab' is assigned a value but never used.","React Hook useEffect has an unnecessary dependency: 'toastId.current'. Either exclude it or remove the dependency array. Mutable values like 'toastId.current' aren't valid dependencies because mutating them doesn't re-render the component.",["109"],["110"],["107"],["108"],["107"],["108"],{"desc":"111","fix":"112"},"no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},{"desc":"111","fix":"115"},"Update the dependencies array to be: [Tezos, setBeaconConnection, setPublicToken, setWallet, setup]",{"range":"116","text":"117"},"Update the dependencies array to be: [transactionInProgress]",{"range":"118","text":"119"},{"range":"120","text":"117"},[3537,3539],"[Tezos, setBeaconConnection, setPublicToken, setWallet, setup]",[3187,3227],"[transactionInProgress]",[3868,3870]]